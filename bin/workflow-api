#!/usr/bin/env node

// vim: set filetype=javascript :

var path = require('path'),
    fs = require('fs'),
    util = require('util'),
    Logger = require('bunyan'),
    API = require('../lib/api'),
    levels = [Logger.TRACE, Logger.DEBUG, Logger.INFO,
              Logger.WARN, Logger.ERROR, Logger.FATAL];

if (process.argv.length < 3) {
  console.error('Usage: [node] ' + process.argv[1] + ' path/to/config.json');
  exit(1);
} else {
  var config_file = path.resolve(process.argv[2]);
  fs.readFile(config_file, 'utf8', function (err, data) {
    if (err) {
      console.error('Error reading config file:');
      console.dir(err);
      exit(1);
    } else {
      try {
        var config = JSON.parse(data);
      } catch (e) {
        console.error('Error parsing config file JSON:');
        console.dir(e);
        exit(1);
      }

      var api = new API(config);
      api.init(function () {
        api.log.info('API server up and running!');
      });

      process.on('SIGUSR1', function () {
        var pos = levels.indexOf(api.log._level);

        console.log('Got SIGUSR1. Attempting to decrease log level');

        if (pos === (levels.length + 1)) {
          console.log('Log level already set to the minimun. Doing nothing');
        } else {
          api.log.level(levels[pos + 1]);
          console.log('Log level set to ' + levels[pos + 1]);
        }
      });

      process.on('SIGUSR2', function () {
        var pos = levels.indexOf(api.log._level);

        console.log('Got SIGUSR2. Attempting to increase log level');

        if (pos === 0) {
          console.log('Log level already set to the maximun. Doing nothing');
        } else {
          api.log.level(levels[pos - 1]);
          console.log('Log level set to ' + levels[pos - 1]);
        }
      });
    }
  });
}
